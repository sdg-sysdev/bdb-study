DB_LOG  对应于 DB_LOCKTAB
LOG     对应于 DB_LOCKREGION

HDR是不被加密的，只有log record可能被加密
每个log record之前都会有一个HDR
每个log file的第一个log record是LOGP/struct __log_persist结构

|------------|--------------------|----------------|------------------------------------|
     HDR            DB_MAC_KEY      IV(DB_IV_BYTES)        RECORD (encrypted or not)


HDR(non-crypted):  prev(4 bytes) + len(4 bytes) + chksum(4 bytes)
HDR(crypted): prev + len + chksum + iv + orig_size


log.c ---------------------------------------------------------------------------------------------------------
// 在共享内存中初始化一个log region
static int __log_init(ENV *env, DB_LOG *dblp)

	调用__log_check_sizes检查配置是否正确

	调用__env_alloc分配共享的日志region (sizeof(LOG))

	初始化日志region的各个字段 (LOG/struct __log)

	设置 env->lg_handle = dblp;

	调用__log_set_config_int函数设置DB_LOG的flags标志



// Internal version of log_open: 
//   only called from ENV->open.
int __log_open(ENV *env)

	为DB_LOG分配内存

	加入/创建共享的log region(__env_region_share, __log_init)

	设置环境的日志句柄为已经初始化的日志子系统数据结构(env->lg_handle = dblp)

	如果该log region是新创建的(F_ISSET(&dblp->reginfo, REGION_CREATE)) : 


		调用__log_recover函数尝试恢复(可能)崩溃之前的日志

		如果没有设置下一个日志文件的长度，则设置它为当前日志文件的长度

		如果当前还没有写入任何日志，则调用__log_newfile函数切换到一个新的日志文件

		初始化replication所需要的next-expected LSN和bulk buffer。在__env_open中，总是
		在log region之前先创建/打开replication region，因此如果使用到replication，则
		在这儿rep_handle肯定是可用的。

	否则
		
		根据当前环境设置的日志文件长度，设置log region的下一个日志文件长度(lp->log_nsize = dbenv->lg_size)。

		调用__log_set_config_int函数设置DB_LOG的flags标志


// 设置LOG.persist.version为指定的newver
// 在region初始创建，replication启动，以及发现一个新的master时被调用
void __log_set_version(ENV *env, u_int32_t newver)


// 验证一个日志文件。在statusp参数中返回结果码 DB_LV_INCOMPLETE/DB_LV_NONEXISTENT/...
int __log_valid(DB_LOG *dblp, u_int32_t number, int set_persist, DB_FH **fhpp, 
		u_int32_t flags, logfile_validity *statusp, u_int32_t versionp)

	调用__log_name函数获取文件路径并打开它
	
	调用__os_read读取日志文件的第一条persistent hdr记录(with HDR ahead)，如果没有读取到足够的
	字节数，则返回DB_LV_INCOMPLETE，否则报错(__db_err)后退出

	如果LOG_SWAPPED(env)，调用__log_hdrswap将数据转换为host表示

	/*
	 * 现在，需要验证persistent record了。我们必须处理以下情况
	 * 1. 用户开启了加密:
	 *    正在读取一个旧版本的，未加密的日志文件  - 在比较记录长度时失败
	 *    正在读取一个当前版本的，未加密的日志文件 - 在比较记录长度时失败
	 *    正在读取一个旧版本的，加密的日志文件  - 解密之后，在版本比对时失败
	 *    正在读取一个当前版本的，加密的文件  - 正常
	 * 2. 用户关闭了加密
	 *    正在读取一个旧版本的，未加密的日志文件  - 版本比对时失败
	 *    正在读取一个当前版本的，未加密的日志文件 - 正常
	 *    正在读取一个旧版本的，加密的日志文件  - 比对magic number时失败(因为是已加密的)
	 *    正在读取一个当前版本的，加密的文件  - 比对magic number时失败(因为是已加密的)
	 */









log_method.c --------------------------------------------------------------------------------------------------
// 确认日志文件长度和日志缓冲区长度兼容
int __log_check_sizes(ENV *env, u_int32_t lg_max, u_int32_t lg_bsize)

    检查在配置了in-memory日志的情况下，是否lg_max小于或等于lg_bsize

// 配置日志子系统对应数据结构DB_LOG的flags字段
int __log_set_config_int(DB_ENV *dbenv, u_int32_t flags, int on, int in_open)

	合法性检查，例如设置的标志是否在几个合法的标志集合中等

	如果开启了LOGGING（LOGGING_ON(env))，则调用__log_set_flags函数设置LOG.db_log_autoremove
	和LOG.db_log_inmemory。然后调用__env_map_flags生成对应的DB_LOG标志并设置


log_put.c -----------------------------------------------------------------------------------------------------
// 初始化并切换到一个新的日志文件。(在还没有日志存在时或填满了一个日志文件时被调用)
int __log_newfile(DB_LOG *dblp, DB_LSN *lsnp, u_int32_t logfile, u_int32_t version)

	如果logfile参数没有指定一个特定的日志文件，并且当前不在日志文件头(logfile == 0 && lp->lsn.offset != 0)，

		调用__log_flush_int函数flush当前日志文件到磁盘。
		/* 
		 * 在这里我们还不能释放log region mutex，因为在切换的时候需要保护当前文件的末尾。尤其可能的是，
		 * 一个拥有更小记录的线程可能会检测到当前日志文件末尾还有足够的空间。即使通过标记当前文件已经满了来
		 * 阻止这种情况的发生，但所有线程还是必须等在这儿，等待flush完成之后lsn.file向前移动。如果针对之前的
		 * 日志文件和当前日志文件各有一个lsn，则可能可以避免这种情况，但这么做也不太可能增加很多吞吐量。
		 */

	 	将lsn中的偏移量保存到lastoff局部变量中，该值将被用于初始化persistent header信息。

	 	++lp->lsn.file;  lp->lsn.offset = 0;		// 实际切换日志文件

	 	设置写的偏移量为0(lp->w_off = 0)。

	否则，设置lastoff = 0

	/*
	 * replication可能需要我们重置整个日志文件命名空间
	 * 在这种情况下，我们也会强制进行日志文件切换，使得replication可以清理旧的日志文件
	 */
	如果logfile != 0，则lp->lsn.file = logfile; lp->lsn.offset = 0; 如果是内存日志，则调用__log_zero 
	清空日志，否则设置lp->s_lsn = lp->lsn，然后调用__log_newfh函数获取新日志文件的句柄

	如果是内存日志(lp->db_log_inmemory)，则调用__log_inmem_newfile函数在内存缓冲区中记录新文件的起始偏移???

	/*
	 * 作为每个日志文件的第一条记录，插入persistent信息。
	 * 注意对于日志中的第一条记录，之前的长度是错误的。但是这没关系，在获取的时候我们会进行检查。
	 */
	如果version参数不为0，则调用__log_set_version设置共享region中的log版本号，之后调用__env_init_rec初始化
	recovery相关的信息

	如果环境没有设置ENV_LITTLEENDIAN标志(BDB默认使用little endian格式记录日志内容)，则调用__log_persistswap
	函数将log file persistent header中的字段转换为big endian格式

	调用__log_encrypt_record对persistent header进行加密

	调用__log_putr函数写入persistent header

	如果lsnp参数不为null，则将更新过的lsn更新到lsnp中



static int __log_putr(DB_LOG *dblp, DB_LSN *lsn, const DBT *dbt, u_int32_t prev, HDR *h)

	设置hdr本地变量为指定的h，或初始化一个本地的HDR(in case h == null)

	保存当前位置(lp->b_off, lp->w_off, lp->f_lsn)

	初始化hdr的prev和len字段 (hdr->prev = prev; hdr->len = (u_int32_t)hdr->size + dbt->size;)

	/*
	 * 如果传进来的checksum字段非0，则表明调用者在获取log mutex之前已经计算了正确的checksum，
	 * 作为一个优化的手段
	 * 但如果调用者计算的checksum正好等于0，那事实上我们也不需要做任何事情...
	 */
	如果hdr->checksum[0] == 0，则调用__db_chksum计算校验码，否则调用LOG_HDR_SUM重新计算校验码
	(将hdr->prev和hdr->len考虑进去，因为在调用者计算的时候这两者都还为0)

	/*
	 * 这时，日志文件的当前偏移就是我们将要写入该记录的LSN，也是调用者所想要的LSN
	 */
	设置lsn参数为当前lsn (*lsn = lp->lsn)

	如果LOG_SWAPPED(env)，则调用__log_hdrswap函数swap hdr

	调用__log_fill函数写hdr

	调用__log_file函数写record (dbt->data, dbt->size)

	更新lp->len = (u_int32_t)(hdr->size + dbt->size); 以及lp->lsn.offset += lp->len;


// 将指定的数据写入日志文件
static int __log_fill(DB_LOG *dblp, DB_LSN *lsn, void *addr, u_int32_t len)

	LOG *lp = dblp->reginfo.primary;

	如果是内存log，则调用__log_inmem_copyin复制数据，更新lp->b_off之后返回

	当 len > 0时

		/*
		 * 如果我们正开始一个新的缓冲区，则记录该缓冲区第一个字节对应的LSN。
		 * 在flush缓冲区的时候需要通过它来判断是否需要flush内存缓冲区。
		 */
		如果当前是缓冲区的起始位置，则将当前LSN的值赋予f_lsn (lp->f_lsn = *lsn)。

		如果当前是缓冲区的起始位置，并且数据长度大于等于缓冲区长度，则调用__log_write
		先将尽量多的数据写入磁盘(size:  (len / bsize) * bsize)，然后跳转到循环开头
		继续执行

		将尽可能多的数据copy到缓冲区

		如果缓冲区满了，则调用__log_write写数据到磁盘


static int __log_write(DB_LOG *dblp, void *addr, u_int32_t len)

	LOG *lp = dblp->reginfo.primary;

	如果还没有打开过日志文件(dblp->lfhp == NULL)，
	或者已经改变了当前文件(dblp->lfname != lp->lsn.file || dblp->lf_timestamp != lp->timestamp)，
	则获取一个新的日志文件(__log_newfh)。

	如果是从文件的开始位置写，则调用__db_file_extend为日志文件预先分配空间，这么做能够增加fsync
	的性能。如果dblp设置了DBLOG_ZERO标志，则调用__db_zero_extend填充0。

	调用__os_io函数在文件的指定位置(lp->w_off)写入数据

	更新下一次写入位置(lp->w_off += len)

	更新统计信息并返回


// 为当前日志文件获取一个文件句柄
static int __log_newfh(DB_LOG *dblp, int create)

	LOG *lp = dblp->reginfo.primary;

	如果之前的句柄没有关闭，则调用__os_closehandle关闭之

	调用__log_valid函数获取日志文件路径并打开它


